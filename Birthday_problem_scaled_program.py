#This program answers the following questions
#by using the functions class_simulator, school_simulator, and district simulator
#to calculated to derised probabilities.

#I. Consider a class with p students. What is the probability that at least k of them share a birthday?
#(Example: In a class with 10 people, what is the probability that at least 2
#of them share a birthday (here, p = 10 and n = 2).)

#II. Consider a school with c classes, each with p students. What is the probability
#that in at least l of those classes, at least k of the students share a birthday?
#(Example: In a school with 100 classes of 10 students each, what is the probability
#that there are at least 5 classes in which at least 2 of the students share a birthday
#(here, c = 100, p = 10, l = 5, and n = 2).)

#III. Consider a school district with s schools, each with c classes that each have p students.
#What is the probability that in at least m of those schools, there are at least l classes in which
#at least k of the students share a birthday? (Example: In a school district with 500 schools,
#each with 100 classes of 10 students each, what is the probability that there are at least
#50 schools that have 5 classes in which at least 2 of the students share a birthday
#(here, s = 500, c = 100, p = 10, m = 50, l = 5, and n = 2).)

#Written by Thomas Flynn

#leap year is 97 out of 400 years


#This function is a random birthday generator that outputs the number of day
#the birthday is with feb. 29, the leap year day being 366.
def generate_birthday():
    
    from random import randint
    
    x = (randint(1,400))

    if x > 97:
        return(randint(1,365))
    else:
        return(randint(1,366))
    
#This function generates a class(list) of num_students which are randomly generated birthday values.
def generate_class(num_students):

    return([generate_birthday() for student in range(num_students)])

#This function takes a class(class_roster) generated by generate_class and a number of
#desired birthday matches to check(num_matches) and checks to see how many birthdays in the class are the same
#it then compares the birthday matches with the desired bithday matches to check and if the actual
#matches is gretaer than or equal to the desired birthday matches it returns True, else it returns False
def class_checker(class_roster,num_matches):
#class_roster.count(birthday) for birthday = 1,2,3,4,5,... 366
    actual_matches = max(([class_roster.count(birthday) for birthday in class_roster]))
    if actual_matches >= num_matches:
        return(True)
    else:
        return(False)
#This function does the class_checker function on 1000 randomly generated classes and divides
#the number of Trues by the number of trials to give the probability that
#there will be num_matches in a class of num_students
def class_simulator(num_students,num_matches):
    
    num_trials = 1000

    valid_matches = 0
    
    for test in range(num_trials):
        my_class = generate_class(num_students)
        my_match = class_checker(my_class,num_matches)
        if my_match is True:
            valid_matches += 1

    probability = valid_matches/num_trials
    print('The probability of {} birthday matches in a class of {} \
students is approximately {:.4f}.'.format(num_matches,num_students,probability))

#This function generates a school of randomly generated classes
def generate_school(num_classes,num_students_per_class):
    return([generate_class(num_students_per_class) for my_class in range(num_classes)])

#This function checks to see if the school of num_classes has num_class_matches with num_student_matches
def school_checker(school_classes,num_class_matches,num_student_matches):
    student_matches=[class_checker(my_class,num_student_matches) for my_class in school_classes]
    if sum(student_matches) >= num_class_matches:
        return(True)
    else:
        return(False)

#This function generates 1000 schools and divides the amount of schools that have num_class_matches by the 1000 trials
#to get the probability that a school of num_classes with num_students will have num_class_matches with num_student_matches.
def school_simulator(num_classes,num_students_per_class,num_class_matches,num_student_matches):

    num_trials = 1000

    valid_class_matches = 0

    for test in range(num_trials):
        my_school = generate_school(num_classes,num_students_per_class)
        my_class_matches = school_checker(generate_school(num_classes,num_students_per_class),num_class_matches,num_student_matches)
        if my_class_matches is True:
            valid_class_matches += 1

    school_probability = valid_class_matches/num_trials
    print('The probability of {} class matches with {} birthday matches in {} classes of {} \
students is approximately {:.4f}.'.format(num_class_matches,num_student_matches,num_classes,num_students_per_class,school_probability))

#This function generates a district with num_schools with num_classes with num_students
def generate_district(num_schools,num_classes,num_students_per_class):
    return([generate_school(num_classes,num_students_per_class) for my_school in range(num_schools)])

#This function checks the district to see if it has num_school_matches with num_class_matches with num_student_matches
def district_checker(district_schools,num_school_matches,num_class_matches,num_student_matches):
    district_match = [school_checker(my_school,num_class_matches,num_student_matches)for my_school in district_schools]
    if sum(district_match) >= num_school_matches:
        return(True)
    else:
        return(False)

#This function gives you the probability that a generated district will have
#num_school_matches with num_class_matches with num_student_matches
def district_simulator(num_schools,num_classes,num_students_per_class,num_school_matches,num_class_matches,num_student_matches):

    num_trials = 1000

    valid_school_matches = 0

    for test in range(num_trials):
        my_district = generate_district(num_schools,num_classes,num_students_per_class)
        my_school_matches = district_checker(generate_district(num_schools,num_classes,num_students_per_class),num_school_matches,num_class_matches,num_student_matches)
        if my_school_matches is True:
            valid_school_matches += 1

    district_probability = valid_school_matches/num_trials
    print('The probability of {} school matches with {} class matches with {} birthday matches in a district of {} schools of {} classes of {} \
students is approximately {:.4f}.'.format(num_school_matches,num_class_matches,num_student_matches,num_schools,num_classes,num_students_per_class,district_probability))
   
#the next two functions can be used to answer the question "IV. Suppose you are made the following offer. If you teach a class at a school,
#you will be given $1000 for each student in the class. However, if at least 3 students in the class share a birthday,
#you get no money for the class. You get to choose how many students are in the class. How many students should you put
#in the class?" by calculating the expected values at certain class sizes and choosing the highest one.
def expected_value_class(num_students,num_matches):

    num_trials = 1000

    valid_matches = 0
    
    for test in range(num_trials):
        my_class = generate_class(num_students)
        my_match = class_checker(my_class,num_matches)
        if my_match is True:
            valid_matches += 1

    probability = valid_matches/num_trials
    expected_value = (1-probability)*(num_students*1000)
    return(expected_value)
    
#the next two functions can be used to answer the question "V. Suppose you are made the following offer.
#If you run a school filled with classes of 25 students each, you will be given $500 for each class that your
#school offers. However, if there are at least 5 classes in which at least 3 students share a birthday, you get
#no money for running the school. You get to choose how many classes are offered at the school. How many classes
#should you offer at the school?" by calculating the expected values at certain school sizes and choosing the highest one.
def highest_expected_value_class(num_students,num_matches):
    my_expected_values = [expected_value_class(item,num_matches) for item in range(65,80)]
    print(my_expected_values)

def expected_value_school(num_classes,num_students_per_class,num_class_matches,num_student_matches):

    num_trials = 1000

    valid_class_matches = 0

    for test in range(num_trials):
        my_school = generate_school(num_classes,num_students_per_class)
        my_class_matches = school_checker(generate_school(num_classes,num_students_per_class),num_class_matches,num_student_matches)
        if my_class_matches is True:
            valid_class_matches += 1

    school_probability = valid_class_matches/num_trials
    expected_value = (1-school_probability)*(num_classes*500)
    return(expected_value)

#the next two functions can be used to answer the question "VI. Suppose you are made the following offer.
#If you run a district filled with schools of 100 classes of 25 students each, you will be given $5000 for each school
#in your district. However, if there are at least 3 schools in which there are at least 5 classes in which
#at least 3 students share a birthday, you get no money for running the district.
#You get to choose how many schools are in the district. How many schools should you put in your district?"
#by calculating the expected values at certain district sizes and choosing the highest one.
def highest_expected_value_school(num_classes,num_students,num_class_matches,num_student_matches):
    my_expected_values = [expected_value_school(item,num_students,num_class_matches,num_student_matches) for item in range(240,244)]
    print(my_expected_values)

def expected_value_district(num_schools,num_classes,num_students_per_class,num_school_matches,num_class_matches,num_student_matches):

    num_trials = 1000

    valid_school_matches = 0

    for test in range(num_trials):
        my_district = generate_district(num_schools,num_classes,num_students_per_class)
        my_school_matches = district_checker(generate_district(num_schools,num_classes,num_students_per_class),num_school_matches,num_class_matches,num_student_matches)
        if my_school_matches is True:
            valid_school_matches += 1

    district_probability = valid_school_matches/num_trials
    expected_value = (1-district_probability)*(num_schools*5000)


def highest_expected_value_district(num_schools,num_classes,num_students_per_class,num_school_matches,num_class_matches,num_student_matches):
    my_expected_values = [expected_value_district(item,num_classes,num_students_per_class,num_school_matches,num_class_matches,num_student_matches) for item in range(10,11)]
    print(my_expected_values)



#IV. The solution I would choose to question IV is 70 students. The reason I would choose 70 students is that choosing 70 students would give you the highest
#expected value. In other words it will most likely give me the greatest amount of money. The way I calculated this is by calculating the probability
# of there being 3 shared birthdays in classes ranging from 1-100 students. I then multiplied the amount of money I would get(num_students*1000) by
#the probability of there not being 3 shared birthdays(1-probability of there being 3 shared birthdays) to get the expected values. I did this 10
#times and found the class size with the highest expected value each time, then added them together and divided by ten to get an average which is the class size
#that would result in the highest expected value which was 70 students.

#V. I would choose 230 classes for this question because I made another program for the amount of classes in a school rather than students in a class and it did the same process to come up with 230 classes.

#VI. I would choose 70 schools.I chose this answer because I made a program similar to the previous 2 programs except for
#the amount of schools rather than classes or students. This program took a long time to run because of
#machine limitations so I observed the sweet spot probabilities that gave the highest expected value with
#the last two questions and they both came out to about .3. So I tried what amount of schools would give a probability
#of .3 by using a proportion from one of my trials with less schools and I got about 70 schools. This combined with
#the program that calculates expected value gave me the most confident answer I could come up with whic was 70 schools.
